"use client";
import React, { useState } from "react";
import { FiPlus, FiTrash2, FiTag, FiDownload } from "react-icons/fi";
import { MdFileDownload } from "react-icons/md";
import { useExpenses } from "@/lib/useFirebase";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";

const ExpenseLogger = () => {
  const { expenses, loading, add, remove } = useExpenses();
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({
    category: "Fuel",
    amount: "",
    description: "",
    type: "work",
  });

  const handleAddExpense = async () => {
    if (formData.category && formData.amount) {
      try {
        await add({
          category: formData.category,
          amount: parseFloat(formData.amount),
          description: formData.description,
          type: formData.type,
        });
        setFormData({
          category: "Fuel",
          amount: "",
          description: "",
          type: "work",
        });
        setShowModal(false);
      } catch (error) {
        console.error("Error adding expense:", error);
      }
    }
  };

  const handleDeleteExpense = async (expenseId) => {
    try {
      await remove(expenseId);
    } catch (error) {
      console.error("Error deleting expense:", error);
    }
  };

  const generateReport = () => {
    const report = `
WORK EXPENSE REPORT - ${new Date().toISOString().split("T")[0]}
========================================

Total Work Expenses: ₹${expenses
      .filter((e) => e.type === "work")
      .reduce((sum, e) => sum + e.amount, 0)}
Total Personal Expenses: ₹${expenses
      .filter((e) => e.type === "personal")
      .reduce((sum, e) => sum + e.amount, 0)}

WORK EXPENSES (Tax-Deductible):
${expenses
  .filter((e) => e.type === "work")
  .map((e) => `- ${e.category}: ₹${e.amount} (${e.description})`)
  .join("\n")}

PERSONAL EXPENSES:
${expenses
  .filter((e) => e.type === "personal")
  .map((e) => `- ${e.category}: ₹${e.amount} (${e.description})`)
  .join("\n")}

Generated by ZestPay
    `;
    const element = document.createElement("a");
    element.setAttribute(
      "href",
      "data:text/plain;charset=utf-8," + encodeURIComponent(report)
    );
    element.setAttribute(
      "download",
      `work-expenses-${new Date().toISOString().split("T")[0]}.txt`
    );
    element.style.display = "none";
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  if (loading) {
    return <div className="text-center py-8">Loading expenses...</div>;
  }

  const workExpenses = expenses.filter((e) => e.type === "work");
  const personalExpenses = expenses.filter((e) => e.type === "personal");

  const workTotal = workExpenses.reduce((sum, e) => sum + e.amount, 0);
  const personalTotal = personalExpenses.reduce((sum, e) => sum + e.amount, 0);

  const categoryBreakdown = expenses.reduce((acc, exp) => {
    const existing = acc.find(
      (e) => e.name === exp.category && e.type === exp.type
    );
    if (existing) {
      existing.value += exp.amount;
    } else {
      acc.push({ name: exp.category, value: exp.amount, type: exp.type });
    }
    return acc;
  }, []);

  const expenseTypes = [
    {
      name: "Work Expenses",
      value: workTotal,
      color: "#10b981",
      category: "work",
    },
    {
      name: "Personal Expenses",
      value: personalTotal,
      color: "#ef4444",
      category: "personal",
    },
  ];

  const workCategories = categoryBreakdown.filter((c) => c.type === "work");
  const colors = [
    "#3b82f6",
    "#ef4444",
    "#10b981",
    "#f59e0b",
    "#8b5cf6",
    "#ec4899",
  ];

  return (
    <div className="bg-linear-to-br from-green-50 to-emerald-50 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="bg-linear-to-br from-green-500 to-emerald-600 p-3 rounded-lg">
            <FiTag className="text-white text-2xl" />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              Work Expense Logger
            </h2>
            <p className="text-sm text-gray-600">
              Track deductible work expenses for tax filing
            </p>
          </div>
        </div>
        <div className="flex gap-2">
          <button
            onClick={generateReport}
            className="bg-linear-to-r from-blue-500 to-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:shadow-lg transform hover:scale-105 transition-all duration-200"
          >
            <FiDownload /> Download Report
          </button>
          <button
            onClick={() => setShowModal(true)}
            className="bg-linear-to-r from-green-500 to-emerald-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:shadow-lg transform hover:scale-105 transition-all duration-200"
          >
            <FiPlus /> Log Expense
          </button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="bg-gradient-to-br from-green-400 to-emerald-500 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 animate-in fade-in slide-in-from-left-4 duration-500">
          <p className="text-sm opacity-90 mb-2">
            Work Expenses (Tax-Deductible)
          </p>
          <div className="text-4xl font-bold">
            ₹{workTotal.toLocaleString()}
          </div>
          <p className="text-sm opacity-75 mt-2">
            {workExpenses.length} entries
          </p>
        </div>

        <div
          className="bg-gradient-to-br from-red-400 to-pink-500 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 animate-in fade-in slide-in-from-right-4 duration-500"
          style={{ animationDelay: "100ms" }}
        >
          <p className="text-sm opacity-90 mb-2">Personal Expenses</p>
          <div className="text-4xl font-bold">
            ₹{personalTotal.toLocaleString()}
          </div>
          <p className="text-sm opacity-75 mt-2">
            {personalExpenses.length} entries
          </p>
        </div>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Pie Chart */}
        <div className="bg-white rounded-xl p-6 shadow-md border-2 border-green-200">
          <h3 className="font-semibold text-gray-900 mb-4">
            Expense Breakdown
          </h3>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={expenseTypes}
                cx="50%"
                cy="50%"
                outerRadius={80}
                paddingAngle={5}
                dataKey="value"
              >
                {expenseTypes.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip formatter={(value) => `₹${value}`} />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Category Breakdown */}
        <div className="bg-white rounded-xl p-6 shadow-md border-2 border-green-200">
          <h3 className="font-semibold text-gray-900 mb-4">
            Work Expenses by Category
          </h3>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={workCategories}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
              <XAxis dataKey="name" stroke="#9ca3af" />
              <YAxis stroke="#9ca3af" />
              <Tooltip formatter={(value) => `₹${value}`} />
              <Bar dataKey="value" fill="#10b981" name="Amount" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Expense List */}
      <div className="bg-white rounded-xl p-6 shadow-md border-2 border-green-200">
        <h3 className="font-semibold text-gray-900 mb-4">Recent Expenses</h3>
        <div className="space-y-2 max-h-96 overflow-y-auto">
          {expenses.length === 0 ? (
            <p className="text-center text-gray-500 py-8">
              No expenses logged yet. Start tracking your work expenses!
            </p>
          ) : (
            expenses.map((exp, index) => (
              <div
                key={exp.id}
                className={`flex items-center justify-between p-4 rounded-lg border-l-4 ${
                  exp.type === "work"
                    ? "border-green-500 bg-green-50 hover:bg-green-100"
                    : "border-red-500 bg-red-50 hover:bg-red-100"
                } transition-all duration-300 animate-in fade-in slide-in-from-left-4`}
                style={{ animationDelay: `${index * 50}ms` }}
              >
                <div className="flex-1">
                  <div className="flex items-center gap-3">
                    <div
                      className={`w-10 h-10 rounded-lg flex items-center justify-center text-white font-bold ${
                        exp.type === "work" ? "bg-green-500" : "bg-red-500"
                      }`}
                    >
                      {exp.category[0]}
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900">
                        {exp.category}
                      </p>
                      <p className="text-xs text-gray-600">{exp.description}</p>
                    </div>
                  </div>
                </div>
                <div className="text-right space-y-1">
                  <p className="font-bold text-lg text-gray-900">
                    ₹{exp.amount}
                  </p>
                  <p className="text-xs text-gray-600">{exp.date}</p>
                </div>
                <button
                  onClick={() => handleDeleteExpense(exp.id)}
                  className="ml-4 text-red-500 hover:text-red-700 p-2 rounded transition-all hover:bg-red-100"
                >
                  <FiTrash2 />
                </button>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-in fade-in duration-200">
          <div className="bg-white rounded-2xl p-8 w-full max-w-md shadow-2xl animate-in zoom-in-95 duration-300">
            <h3 className="text-2xl font-bold text-gray-900 mb-6">
              Log an Expense
            </h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Expense Type
                </label>
                <select
                  value={formData.type}
                  onChange={(e) =>
                    setFormData({ ...formData, type: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all"
                >
                  <option value="work">Work Expense (Tax-Deductible)</option>
                  <option value="personal">Personal Expense</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Category
                </label>
                <select
                  value={formData.category}
                  onChange={(e) =>
                    setFormData({ ...formData, category: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all"
                >
                  <option>Fuel</option>
                  <option>Vehicle Repair</option>
                  <option>Phone Bill</option>
                  <option>Internet</option>
                  <option>Supplies</option>
                  <option>Other</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Amount (₹)
                </label>
                <input
                  type="number"
                  placeholder="500"
                  value={formData.amount}
                  onChange={(e) =>
                    setFormData({ ...formData, amount: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Description
                </label>
                <textarea
                  placeholder="e.g., Fuel for deliveries"
                  value={formData.description}
                  onChange={(e) =>
                    setFormData({ ...formData, description: e.target.value })
                  }
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all resize-none"
                  rows="3"
                />
              </div>
            </div>
            <div className="flex gap-3 mt-8">
              <button
                onClick={() => setShowModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 font-semibold hover:bg-gray-50 transition-all"
              >
                Cancel
              </button>
              <button
                onClick={handleAddExpense}
                className="flex-1 px-4 py-2 bg-linear-to-r from-green-500 to-emerald-600 text-white font-semibold rounded-lg hover:shadow-lg transition-all"
              >
                Log Expense
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ExpenseLogger;
